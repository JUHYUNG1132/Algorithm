
 개념
문제를 해결하는 과정에서, 전에 했던 계산을 반복해야하는 경우, 동적계획법(Dynamic Programming, 기억하며 풀기)이
효율적일 수 있다.

동적계획법에서는 큰 문제를 작은 문제로 쪼개서, 그 답을 저장해두고 재활용한다.

Top-down 의 경우 Memoization, 재귀를 사용한다
Bottom-up 의 경우 Tabulation, 반복문을 사용한다

 사용 조건
1) Overlapping Problem(겹치는/반복되는 문제)
 => 점화식 같이 동일한 계산을 반복할때

2) Optimal Problem(최적 부분 구조)
 => 부분 문제에서 구한 최적의 결과가, 전체 문제에서도 최적이라는 것

  장점
 (피보나치 수열의 경우)
 재귀 호출의 경우, 시간복잡도가 O(2^n) 이지만, 동적계획법에서는 O(n)이다.
  => 불필요한 반복을 줄여 시간복잡도 감소
